// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace PDB_00_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 30> locations_array__ =
  {" (found before start of program)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 23, column 2 to column 17)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 24, column 2 to column 22)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 27, column 2 to line 31, column 27)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 2, column 2 to column 17)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 3, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 3, column 2 to column 21)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 4, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 4, column 2 to column 22)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 5, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 5, column 2 to column 21)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 6, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 6, column 2 to column 18)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 7, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 7, column 2 to column 19)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 8, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 8, column 2 to column 19)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 9, column 19 to column 20)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 9, column 2 to column 22)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 12, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 12, column 2 to column 21)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 13, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 13, column 2 to column 21)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 14, column 9 to column 10)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 14, column 2 to column 20)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 17, column 4 to column 39)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 18, column 4 to column 39)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 19, column 4 to column 39)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 16, column 17 to line 20, column 3)",
  " (in '/mnt/home/gturok/drghmc/PDB_00/PDB_00.stan', line 16, column 2 to line 20, column 3)"};
class PDB_00_model final : public model_base_crtp<PDB_00_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> partyid7_data__;
  Eigen::Matrix<double,-1,1> real_ideo_data__;
  Eigen::Matrix<double,-1,1> race_adj_data__;
  Eigen::Matrix<double,-1,1> educ1_data__;
  Eigen::Matrix<double,-1,1> gender_data__;
  Eigen::Matrix<double,-1,1> income_data__;
  std::vector<int> age_discrete;
  Eigen::Matrix<double,-1,1> age30_44_data__;
  Eigen::Matrix<double,-1,1> age45_64_data__;
  Eigen::Matrix<double,-1,1> age65up_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> partyid7{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> real_ideo{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> race_adj{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> educ1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> gender{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> income{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> age30_44{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> age45_64{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> age65up{nullptr, 0};
 public:
  ~PDB_00_model() {}
  PDB_00_model(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "PDB_00_model_namespace::PDB_00_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 4;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 4;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 5;
      stan::math::validate_non_negative_index("partyid7", "N", N);
      current_statement__ = 6;
      context__.validate_dims("data initialization", "partyid7", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      partyid7_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&partyid7)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(partyid7_data__.data(), N);
      {
        std::vector<local_scalar_t__> partyid7_flat__;
        current_statement__ = 6;
        partyid7_flat__ = context__.vals_r("partyid7");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(partyid7, partyid7_flat__[(pos__ - 1)],
            "assigning variable partyid7", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 7;
      stan::math::validate_non_negative_index("real_ideo", "N", N);
      current_statement__ = 8;
      context__.validate_dims("data initialization", "real_ideo", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      real_ideo_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                           std::numeric_limits<double>::quiet_NaN());
      new (&real_ideo)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(real_ideo_data__.data(), N);
      {
        std::vector<local_scalar_t__> real_ideo_flat__;
        current_statement__ = 8;
        real_ideo_flat__ = context__.vals_r("real_ideo");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(real_ideo, real_ideo_flat__[(pos__ - 1)],
            "assigning variable real_ideo", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 9;
      stan::math::validate_non_negative_index("race_adj", "N", N);
      current_statement__ = 10;
      context__.validate_dims("data initialization", "race_adj", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      race_adj_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&race_adj)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(race_adj_data__.data(), N);
      {
        std::vector<local_scalar_t__> race_adj_flat__;
        current_statement__ = 10;
        race_adj_flat__ = context__.vals_r("race_adj");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(race_adj, race_adj_flat__[(pos__ - 1)],
            "assigning variable race_adj", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 11;
      stan::math::validate_non_negative_index("educ1", "N", N);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "educ1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      educ1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&educ1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(educ1_data__.data(), N);
      {
        std::vector<local_scalar_t__> educ1_flat__;
        current_statement__ = 12;
        educ1_flat__ = context__.vals_r("educ1");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(educ1, educ1_flat__[(pos__ - 1)],
            "assigning variable educ1", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      stan::math::validate_non_negative_index("gender", "N", N);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "gender", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      gender_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&gender)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(gender_data__.data(), N);
      {
        std::vector<local_scalar_t__> gender_flat__;
        current_statement__ = 14;
        gender_flat__ = context__.vals_r("gender");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(gender, gender_flat__[(pos__ - 1)],
            "assigning variable gender", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 15;
      stan::math::validate_non_negative_index("income", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "income", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      income_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&income)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(income_data__.data(), N);
      {
        std::vector<local_scalar_t__> income_flat__;
        current_statement__ = 16;
        income_flat__ = context__.vals_r("income");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(income, income_flat__[(pos__ - 1)],
            "assigning variable income", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      stan::math::validate_non_negative_index("age_discrete", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "age_discrete", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      age_discrete = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 18;
      age_discrete = context__.vals_i("age_discrete");
      current_statement__ = 19;
      stan::math::validate_non_negative_index("age30_44", "N", N);
      current_statement__ = 20;
      age30_44_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&age30_44)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(age30_44_data__.data(), N);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("age45_64", "N", N);
      current_statement__ = 22;
      age45_64_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&age45_64)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(age45_64_data__.data(), N);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("age65up", "N", N);
      current_statement__ = 24;
      age65up_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&age65up)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(age65up_data__.data(), N);
      current_statement__ = 29;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 25;
        stan::model::assign(age30_44,
          stan::math::logical_eq(
            stan::model::rvalue(age_discrete, "age_discrete",
              stan::model::index_uni(n)), 2), "assigning variable age30_44",
          stan::model::index_uni(n));
        current_statement__ = 26;
        stan::model::assign(age45_64,
          stan::math::logical_eq(
            stan::model::rvalue(age_discrete, "age_discrete",
              stan::model::index_uni(n)), 3), "assigning variable age45_64",
          stan::model::index_uni(n));
        current_statement__ = 27;
        stan::model::assign(age65up,
          stan::math::logical_eq(
            stan::model::rvalue(age_discrete, "age_discrete",
              stan::model::index_uni(n)), 4), "assigning variable age65up",
          stan::model::index_uni(n));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 9 + 1;
  }
  inline std::string model_name() const final {
    return "PDB_00_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --include-paths=."};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "PDB_00_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(9, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(9);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 3;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(partyid7,
                         stan::math::add(
                           stan::math::add(
                             stan::math::add(
                               stan::math::add(
                                 stan::math::add(
                                   stan::math::add(
                                     stan::math::add(
                                       stan::math::add(
                                         stan::model::rvalue(beta, "beta",
                                           stan::model::index_uni(1)),
                                         stan::math::multiply(
                                           stan::model::rvalue(beta, "beta",
                                             stan::model::index_uni(2)),
                                           real_ideo)),
                                       stan::math::multiply(
                                         stan::model::rvalue(beta, "beta",
                                           stan::model::index_uni(3)),
                                         race_adj)),
                                     stan::math::multiply(
                                       stan::model::rvalue(beta, "beta",
                                         stan::model::index_uni(4)), age30_44)),
                                   stan::math::multiply(
                                     stan::model::rvalue(beta, "beta",
                                       stan::model::index_uni(5)), age45_64)),
                                 stan::math::multiply(
                                   stan::model::rvalue(beta, "beta",
                                     stan::model::index_uni(6)), age65up)),
                               stan::math::multiply(
                                 stan::model::rvalue(beta, "beta",
                                   stan::model::index_uni(7)), educ1)),
                             stan::math::multiply(
                               stan::model::rvalue(beta, "beta",
                                 stan::model::index_uni(8)), gender)),
                           stan::math::multiply(
                             stan::model::rvalue(beta, "beta",
                               stan::model::index_uni(9)), income)), sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "PDB_00_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(9,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(9);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      out__.write(beta);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(9, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(9),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(9)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(9, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "sigma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(9)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(9) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(9) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (9 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (9 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = PDB_00_model_namespace::PDB_00_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return PDB_00_model_namespace::profiles__;
}
#endif